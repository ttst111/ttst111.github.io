<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ttstcy</title>
  <subtitle>每一个不曾起舞的日子，都是对生命的辜负</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-16T14:25:30.792Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ttstcy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python排序算法03快速排序</title>
    <link href="http://yoursite.com/2017/08/16/python%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9503%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2017/08/16/python排序算法03快速排序/</id>
    <published>2017-08-16T14:05:58.000Z</published>
    <updated>2017-08-16T14:25:30.792Z</updated>
    
    <content type="html"><![CDATA[<h3>快速排序</h3>

<h4>简述</h4>


<p>快速排序由C. A. R. Hoare在1962年提出。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p>
<h4>基本思想</h4>


<p>1.设置两个变量i、j，排序开始的时候：i=0，j=N-1；<br>2.以第一个数组元素作为关键数据，赋值给key，即key=A[0]；<br>3.从j开始向前搜索，即由后开始向前搜索(j–)，找到第一个小于key的值A[j]，将A[j]和A[i]互换；<br>4.从i开始向后搜索，即由前开始向后搜索(i++)，找到第一个大于key的A[i]，将A[i]和A[j]互换；<br>5.重复第3、4步，直到i=j； (3,4步中，没找到符合条件的值，即3中A[j]不小于key,4中A[i]不大于key的时候改变j、i的值，使得j=j-1，i=i+1，直至找到为止。找到符合条件的值，进行交换的时候i， j指针位置不变。另外，i==j这一过程一定正好是i+或j-完成的时候，此时令循环结束）。</p>
<h4>代码实现</h4>

<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(array, left, right)</span>:</span></div><div class="line">    <span class="keyword">if</span> left &lt; right:</div><div class="line">        mid = partition(array, left, right)</div><div class="line">        quick_sort(array, left,  mid<span class="number">-1</span>)</div><div class="line">        quick_sort(array, mid+<span class="number">1</span>, right)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(array, left, right)</span>:</span></div><div class="line">    tmp = array[left]</div><div class="line">    <span class="keyword">while</span> left &lt; right:</div><div class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> array[right] &gt;= tmp:</div><div class="line">            right -= <span class="number">1</span></div><div class="line">        array[left] = array[right]</div><div class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> array[left] &lt;= tmp:</div><div class="line">            left += <span class="number">1</span></div><div class="line">        array[right] = array[left]</div><div class="line">    array[left] = tmp</div><div class="line">    <span class="keyword">return</span> left</div></pre></td></tr></table></figure>
<h4>优缺点<4><br><br>优点:排序速度快<br>缺点:不稳定<br><br><br><h4>时间复杂度</h4>


<p>快速排序最优的情况下时间复杂度为：O( nlogn )<br>快速排序最差的情况下时间复杂度为：O( n^2 )</p>
</4></h4>]]></content>
    
    <summary type="html">
    
      &lt;h3&gt;快速排序&lt;/h3&gt;

&lt;h4&gt;简述&lt;/h4&gt;


&lt;p&gt;快速排序由C. A. R. Hoare在1962年提出。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="排序算法" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>每天一道python练习05</title>
    <link href="http://yoursite.com/2017/08/16/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93python%E7%BB%83%E4%B9%A005/"/>
    <id>http://yoursite.com/2017/08/16/每天一道python练习05/</id>
    <published>2017-08-16T13:19:26.000Z</published>
    <updated>2017-08-16T14:02:32.062Z</updated>
    
    <content type="html"><![CDATA[<h3> 题目：对10个数进行排序</h3>

<p><b>code1:</b></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding=utf-8 -*-</span></div><div class="line"><span class="comment"># create Ttstcy</span></div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string"> 题目：对10个数进行排序</span></div><div class="line"><span class="string"> 直接调用排序方法sort()</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"please input 10 number:"</span></div><div class="line"></div><div class="line">arr=[]</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">    l.append(int(raw_input(<span class="string">'Input you number:'</span>)))</div><div class="line"></div><div class="line">arr.sort()    <span class="comment">#直接调用sort()排序方法</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> arr</div></pre></td></tr></table></figure>
<p><b>code2:</b></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding=utf-8 -*-</span></div><div class="line"><span class="comment"># create Ttstcy</span></div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string"> 题目：对10个数进行排序</span></div><div class="line"><span class="string"> 采用排序算法</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"please input 10 number:"</span></div><div class="line"></div><div class="line">arr=[]</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</div><div class="line">    arr.append(int(raw_input(<span class="string">'Input a number:'</span>)))</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):        <span class="comment">#编写排序算法</span></div><div class="line">     <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>,<span class="number">10</span>):</div><div class="line">         <span class="keyword">if</span> l[j]&lt;l[i]:</div><div class="line">             temp = arr[j]</div><div class="line">             arr[j] = arr[i]</div><div class="line">             arr[i] = temp    </div><div class="line"></div><div class="line"><span class="keyword">print</span>  arr</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3&gt; 题目：对10个数进行排序&lt;/h3&gt;

&lt;p&gt;&lt;b&gt;code1:&lt;/b&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;d
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python排序算法02选择排序</title>
    <link href="http://yoursite.com/2017/08/15/python%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9502%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2017/08/15/python排序算法02选择排序/</id>
    <published>2017-08-15T12:47:27.000Z</published>
    <updated>2017-08-15T13:16:48.681Z</updated>
    
    <content type="html"><![CDATA[<p></p><h3>02选择排序</h3><br><b>描述</b><p></p>
<p>选择排序是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）<br>的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法<br>（比如序列[5， 5， 3]第一次就将第一个[5]与[3]交换，导致第一个5挪动到第二个5后面）。</p>
<p><b>基本思想:</b><br>  对比数组中前一个元素跟后一个元素的大小，如果后面的元素比前面的元素小则用一个变量k来记住他的位置，接着第二次比较，前面“后一个元素”现变成了“前一个元素”，继续跟他的“后一个元素”进行比较如果后面的元素比他要小则用变量k记住它在数组中的位置(下标)，等到循环结束的时候，我们应该找到了最小的那个数的下标了，然后进行判断，如果这个元素的下标不是第一个元素的下标，就让第一个元素跟他交换一下值，这样就找到整个数组中最小的数了。然后找到数组中第二小的数，让他跟数组中第二个元素交换一下值，以此类推。</p>
<p><b>代码如下:</b></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span><span class="params">(lists)</span>:</span></div><div class="line">    <span class="comment"># 选择排序</span></div><div class="line">    count = len(lists)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, count):</div><div class="line">        min = i</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, count):</div><div class="line">            <span class="keyword">if</span> lists[min] &gt; lists[j]:</div><div class="line">                min = j</div><div class="line">        lists[min], lists[i] = lists[i], lists[min]</div><div class="line">    <span class="keyword">return</span> lists</div></pre></td></tr></table></figure>
<p> 优点：移动的数据次数已知为（n-1)次、<br> 缺点：不稳定、速度慢</p>
<p> <b>时间复杂度:</b></p>
<p> 选择排序的交换操作介于 0 和 (n - 1） 次之间。选择排序的比较操作为 n (n - 1） / 2 次之间。<br> 选择排序的赋值操作介于 0 和 3 (n - 1） 次之间。</p>
<p>  比较次数O(n^2），比较次数与关键字的初始状态无关，总的比较次数N=(n-1）+(n-2）+…+1=n*(n-1）/2。交换次数O(n），最好情况是，已经有序，交换0次；最坏情况交换n-1次，逆序交换n/2次。交换次数比冒泡排序少多了，由于交换所需CPU时间比比较所需的CPU时间多，n值较小时，选择排序比冒泡排序快。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;h3&gt;02选择排序&lt;/h3&gt;&lt;br&gt;&lt;b&gt;描述&lt;/b&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;选择排序是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）&lt;br&gt;的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。 选择排序是不稳定的排序
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="排序算法" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>每天一道python练习04</title>
    <link href="http://yoursite.com/2017/08/15/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93python%E7%BB%83%E4%B9%A004/"/>
    <id>http://yoursite.com/2017/08/15/每天一道python练习04/</id>
    <published>2017-08-15T11:33:02.000Z</published>
    <updated>2017-08-15T12:20:34.657Z</updated>
    
    <content type="html"><![CDATA[<h3>题目：输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。</h3>

<p>分析：控制语句进行判断。</p>
<p><b>code:</b></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding=utf-8 -*-</span></div><div class="line"><span class="comment"># create Ttstcy</span></div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">题目：输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line">Intestr=raw_input(<span class="string">"请输入字符串："</span>)</div><div class="line"></div><div class="line">zm=<span class="number">0</span></div><div class="line">kg=<span class="number">0</span></div><div class="line">sz=<span class="number">0</span></div><div class="line">ot=<span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> Intestr:</div><div class="line">	<span class="keyword">if</span> i.isalpha():</div><div class="line">		zm+=<span class="number">1</span></div><div class="line">	<span class="keyword">elif</span> i.isspace():</div><div class="line">		kg+=<span class="number">1</span></div><div class="line">	<span class="keyword">elif</span> i.isdigit():</div><div class="line">		sz+=<span class="number">1</span></div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		ot+=<span class="number">1</span></div><div class="line"><span class="keyword">print</span> (<span class="string">"字母有%d,空格有%d,数字有%d,其他有%d"</span>) % (zm,kg,sz,ot)</div></pre></td></tr></table></figure>
<p><b>注释：</b><br>i.isalnum() 所有字符都是数字或者字母<br>i.isalpha() 所有字符都是字母<br>i.isdigit() 所有字符都是数字<br>i.islower() 所有字符都是小写<br>i.isupper() 所有字符都是大写<br>i.istitle() 所有单词都是首字母大写，像标题<br>i.isspace() 所有字符都是空白字符、\t、\n、\r</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3&gt;题目：输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。&lt;/h3&gt;

&lt;p&gt;分析：控制语句进行判断。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;code:&lt;/b&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python排序算法01冒泡排序</title>
    <link href="http://yoursite.com/2017/08/14/python%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9501%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2017/08/14/python排序算法01冒泡排序/</id>
    <published>2017-08-14T15:20:08.000Z</published>
    <updated>2017-08-14T16:05:50.729Z</updated>
    
    <content type="html"><![CDATA[<h3>01冒泡排序</h3>

<p><b>描述</b></p>
<p>  冒泡算法属于入门级算法，主要通过循环，进行向上的两两比较，从而达到冒泡的效果具体方法是针对循环中的每一元素，都对它后面的元素循环比较，交换大小值，每次循环“冒”一个最<br>大值（或最小值）放在里层循环初始的地方。<br>python中的具体代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#-* coding=utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">冒泡排序 for python</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubbleSort</span><span class="params">(L)</span>:</span></div><div class="line">    <span class="keyword">assert</span>(type(L)==type([<span class="string">''</span>]))</div><div class="line">    length = len(L)</div><div class="line">    <span class="keyword">if</span> length==<span class="number">0</span> <span class="keyword">or</span> length==<span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> L</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(length):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(length<span class="number">-1</span>-i):</div><div class="line">            <span class="keyword">if</span> L[j] &lt; L[j+<span class="number">1</span>]: </div><div class="line">                temp = L[j]</div><div class="line">                L[j] = L[j+<span class="number">1</span>]</div><div class="line">                L[j+<span class="number">1</span>] = temp</div><div class="line">    <span class="keyword">return</span> L</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>冒泡优点： 稳定（时间复杂度为O(1)常量）、简单<br>       缺点：效率不高 （如果一个数组有n个数，那么排序完成后需要比较n*(n-1)/2次)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3&gt;01冒泡排序&lt;/h3&gt;

&lt;p&gt;&lt;b&gt;描述&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;  冒泡算法属于入门级算法，主要通过循环，进行向上的两两比较，从而达到冒泡的效果具体方法是针对循环中的每一元素，都对它后面的元素循环比较，交换大小值，每次循环“冒”一个最&lt;br&gt;大值（或最小值）放在里层循环
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="排序算法" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>每天一道python练习03</title>
    <link href="http://yoursite.com/2017/08/14/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93python%E7%BB%83%E4%B9%A003/"/>
    <id>http://yoursite.com/2017/08/14/每天一道python练习03/</id>
    <published>2017-08-14T14:12:38.000Z</published>
    <updated>2017-08-14T15:50:19.228Z</updated>
    
    <content type="html"><![CDATA[<p></p><h3>题目：输入某年某月某日，判断这一天是这一年的第几天？</h3><br>strptime（）根据格式把字符串解析为一个元组<p></p>
<p>分析：通过datetime函数获取到当前时间转化为</p>
<p>code1:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"><span class="comment">#creat Ttstcy</span></div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">题目：输入某年某月某日，判断这一天是这一年的第几天？</span></div><div class="line"><span class="string">strptime（）根据格式把字符串解析为一个元组</span></div><div class="line"><span class="string">strftime() 函数接收以时间元组，并返回以可读字符串表示的当地时间，格式由参数format决定。</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"><span class="comment">#导入时间的库函数</span></div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"></div><div class="line">time=str(raw_input(<span class="string">"请输入日期(例如20170814):"</span>))</div><div class="line"></div><div class="line">tm=datetime.strptime(time,<span class="string">"%Y%m%d"</span>) <span class="comment">#现在日期</span></div><div class="line"></div><div class="line"></div><div class="line">tm1=time[<span class="number">0</span>:<span class="number">4</span>]+<span class="string">'0101'</span>         <span class="comment">#输入年限的第一天</span></div><div class="line">tm2=datetime.strptime(tm1,<span class="string">"%Y%m%d"</span>)   </div><div class="line"></div><div class="line">nowday=int((tm-tm2).days) + <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"今天是今年的第%d天"</span> % nowday</div></pre></td></tr></table></figure></p>
<p>code2:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#导入时间的库函数</span></div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"></div><div class="line">time=datetime.now()</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"今天是今年的第%s天"</span> % (time.strftime(<span class="string">"%j"</span>))</div></pre></td></tr></table></figure></p>
<p>注释:<br>python中时间日期格式化符号：<br>%y 两位数的年份表示（00-99）<br>%Y 四位数的年份表示（000-9999）<br>%m 月份（01-12）<br>%d 月内中的一天（0-31）<br>%H 24小时制小时数（0-23）<br>%I 12小时制小时数（01-12）<br>%M 分钟数（00=59）<br>%S 秒（00-59）<br>%a 本地简化星期名称<br>%A 本地完整星期名称<br>%b 本地简化的月份名称<br>%B 本地完整的月份名称<br>%c 本地相应的日期表示和时间表示<br>%j 年内的一天（001-366）<br>%p 本地A.M.或P.M.的等价符<br>%U 一年中的星期数（00-53）星期天为星期的开始<br>%w 星期（0-6），星期天为星期的开始<br>%W 一年中的星期数（00-53）星期一为星期的开始<br>%x 本地相应的日期表示<br>%X 本地相应的时间表示<br>%Z 当前时区的名称<br>%% %号本身</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;h3&gt;题目：输入某年某月某日，判断这一天是这一年的第几天？&lt;/h3&gt;&lt;br&gt;strptime（）根据格式把字符串解析为一个元组&lt;p&gt;&lt;/p&gt;
&lt;p&gt;分析：通过datetime函数获取到当前时间转化为&lt;/p&gt;
&lt;p&gt;code1:&lt;br&gt;&lt;figure class=&quot;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>每天一道python练习02</title>
    <link href="http://yoursite.com/2017/08/13/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93python%E7%BB%83%E4%B9%A002/"/>
    <id>http://yoursite.com/2017/08/13/每天一道python练习02/</id>
    <published>2017-08-13T13:27:00.000Z</published>
    <updated>2017-08-14T15:51:27.797Z</updated>
    
    <content type="html"><![CDATA[<h3>题目：一个整数，它加上100后是一个完全平方数，再加上168又是一个完全平方数，请问该数是多少？</h3>

<p>分析：可以通过math库里sqrt函数进行求解，如果可以开平方则这个数为整数，否则为浮点数。（math.sqrt()开方函数)</p>
<p>code:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"><span class="comment">#create Ttstcy</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line">i=<span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">if</span> math.sqrt(i+<span class="number">100</span>)-int(math.sqrt(i+<span class="number">100</span>))==<span class="number">0</span> <span class="keyword">and</span> math.sqrt(i+<span class="number">168</span>)-int(math.sqrt(i+<span class="number">168</span>))==<span class="number">0</span>:   </div><div class="line">        <span class="keyword">print</span> <span class="string">"这个数是%d"</span> % i</div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        i+=<span class="number">1</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3&gt;题目：一个整数，它加上100后是一个完全平方数，再加上168又是一个完全平方数，请问该数是多少？&lt;/h3&gt;

&lt;p&gt;分析：可以通过math库里sqrt函数进行求解，如果可以开平方则这个数为整数，否则为浮点数。（math.sqrt()开方函数)&lt;/p&gt;
&lt;p&gt;code:&lt;b
    
    </summary>
    
    
      <category term="python,math" scheme="http://yoursite.com/tags/python-math/"/>
    
  </entry>
  
  <entry>
    <title>每天一道python练习01</title>
    <link href="http://yoursite.com/2017/08/12/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93python%E7%BB%83%E4%B9%A001/"/>
    <id>http://yoursite.com/2017/08/12/每天一道python练习01/</id>
    <published>2017-08-12T13:24:07.000Z</published>
    <updated>2017-08-14T15:51:37.931Z</updated>
    
    <content type="html"><![CDATA[<h3>题目：有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？</h3>

<p>分析：可以采用 for循环排列由1234组成的三位数，用if条件进行不重复判断，最后输出。</p>
<p>code:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#create TTstcy</span></div><div class="line"><span class="comment">#计量次数</span></div><div class="line">num=<span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"由1234组成的不重复的三位数有:"</span></div><div class="line"></div><div class="line"><span class="comment">#for循环计算排列个数</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range（<span class="number">1</span>，<span class="number">5</span>):</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</div><div class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</div><div class="line">	    <span class="keyword">if</span> i!=j <span class="keyword">and</span> j!=k <span class="keyword">and</span> i!=k:</div><div class="line">	         <span class="keyword">print</span> i*<span class="number">100</span>+j*<span class="number">10</span>+k</div><div class="line">		 num+=<span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"共有%d种情况"</span> % num</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3&gt;题目：有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？&lt;/h3&gt;

&lt;p&gt;分析：可以采用 for循环排列由1234组成的三位数，用if条件进行不重复判断，最后输出。&lt;/p&gt;
&lt;p&gt;code:&lt;br&gt;&lt;figure class=&quot;highligh
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>简记使用hexo在github搭建个人博客</title>
    <link href="http://yoursite.com/2017/08/12/%E7%AE%80%E8%AE%B0%E4%BD%BF%E7%94%A8hexo%E5%9C%A8github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/08/12/简记使用hexo在github搭建个人博客/</id>
    <published>2017-08-12T08:00:57.000Z</published>
    <updated>2017-08-14T04:06:47.535Z</updated>
    
    <content type="html"><![CDATA[<p>  很早之前就想搭建一个个人博客，记录一些生活中的感悟，可惜一直没有时间。现在终于有时间了，记录一下<br>搭建的过程。<br>首先是准备工作：<br>1.注册给github账号<br>  进入<a href="https://github.com/注册github账号。" target="_blank" rel="external">https://github.com/注册github账号。</a><br>2.建立博客仓库<br>  注册成功后，登入。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  很早之前就想搭建一个个人博客，记录一些生活中的感悟，可惜一直没有时间。现在终于有时间了，记录一下&lt;br&gt;搭建的过程。&lt;br&gt;首先是准备工作：&lt;br&gt;1.注册给github账号&lt;br&gt;  进入&lt;a href=&quot;https://github.com/注册github账号。&quot;
    
    </summary>
    
    
      <category term="hexo,git" scheme="http://yoursite.com/tags/hexo-git/"/>
    
  </entry>
  
  <entry>
    <title>hello</title>
    <link href="http://yoursite.com/2017/08/12/hello/"/>
    <id>http://yoursite.com/2017/08/12/hello/</id>
    <published>2017-08-12T06:16:46.000Z</published>
    <updated>2017-08-12T08:08:04.226Z</updated>
    
    <content type="html"><![CDATA[<p>hello world!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello world!&lt;/p&gt;

    
    </summary>
    
    
      <category term="hello" scheme="http://yoursite.com/tags/hello/"/>
    
  </entry>
  
</feed>
